T(n) = 4T(n / 2) + n^2log(n)
We have a = 4, b = 2 ⇒ logb(a) = log2(4) = 2.
Then there is no ε > 0 s.t. n^2log(n) = Ω(n^(2 + ε)), so we can't use the master
theorem.

By considering the recursion tree, guess that O(n^2 * log(n)^2) is an upper bound.
Suppose T(m) ≤ m^2 * log(m)^2 ∀ m < n. Then
T(n) = 4T(n / 2) + n^2 * log(n)
     ≤ 4(n / 2)^2 * log(n / 2)^2 + n^2 * log(n)
     = cn^2 * log(n)^2 + n^2 * (c(1 - 2log(n)) + log(n))
     ≤ cn^2 * log(n)^2
so long as
  c(1 - 2log(n)) + log(n) ≤ 0
⇒ c ≥ log(n) / (2log(n) - 1).

So T(n) = O(n^2 * log(n)^2).
